from Bio.Seq import Seq
from Bio.Alphabet import generic_dna
from Bio import Restriction
from Bio.Restriction import *
import primer3
from selenium import webdriver
from selenium.webdriver.common.keys import Keys
import escher
import escher.urls
from escher import Builder
import cobra


from reportlab.lib import colors
from reportlab.lib.units import cm
from Bio.Graphics import GenomeDiagram
from Bio import SeqIO
from Bio.SeqFeature import SeqFeature, FeatureLocation
import subprocess


#Simple loop to determine Restriction Batch Enzymes
def lux(a,b,c) :
    i = 0
    cont = []
    while i <= len(a):
        for element in c:
            if b[element] !=[]:
                cont = cont + [element]
                i += 1
            else:
                i +=1
                ghi =  RestrictionBatch(cont)                 
    return ghi

# Use primer3 to calculate suitable primers using tRNA's
def primer(input_seq, gname):
    primer = (primer3.bindings.designPrimers(
            {
                'SEQUENCE_ID': 'hmhm',
                'SEQUENCE_TEMPLATE': input_seq,
                'SEQUENCE_INCLUDED_REGION': [40,55]
            },
            {
                'PRIMER_TASK': 'generic',
                'PRIMER_PICK_LEFT_PRIMER': 1,
                'PRIMER_PICK_INTERNAL_OLIGO': 0,
                'PRIMER_PICK_RIGHT_PRIMER': 0,
                'PRIMER_NUM_RETURN': 5,
                'PRIMER_OPT_SIZE': 25,
                'PRIMER_MIN_SIZE': 16,
                'PRIMER_MAX_SIZE': 36,
                'PRIMER_OPT_TM': 60.0,
                'PRIMER_MIN_TM': 57.0,
                'PRIMER_MAX_TM': 65.0,
                'PRIMER_MIN_GC': 30.0,
                'PRIMER_MAX_GC': 80.0,
                'PRIMER_MAX_POLY_X': 5,
                'PRIMER_SALT_MONOVALENT': 50.0,
                'PRIMER_DNA_CONC': 50.0,
                'PRIMER_MAX_NS_ACCEPTED': 0,
                'PRIMER_MAX_SELF_ANY': 12,
                'PRIMER_MAX_SELF_END': 8,
                'PRIMER_PAIR_MAX_COMPL_ANY': 12,
                'PRIMER_PAIR_MAX_COMPL_END': 8,
                'PRIMER_GC_CLAMP': 1,
                'PRIMER_PRODUCT_SIZE_RANGE': [[40,100]],})
                 )
    return print('\n\n Primer Results: \n\n', ' Primer ', gname, ': ',  primer['PRIMER_LEFT_0_SEQUENCE'],'\n\n Size: ', len(primer['PRIMER_LEFT_0_SEQUENCE']),'bp' , '\n\n','Melting Temperature: ', primer['PRIMER_LEFT_0_TM'], '\n\n GC Content(%): ', primer['PRIMER_LEFT_0_GC_PERCENT'])
#Once again for gRNA2 because I was too lazy to think about a better implementation    
def primery(input_seq,gname):
    primer = (primer3.bindings.designPrimers(
            {
                'SEQUENCE_ID': 'hmhm',
                'SEQUENCE_TEMPLATE': input_seq,
                'SEQUENCE_INCLUDED_REGION': [40,55]
            },
            {
                'PRIMER_TASK': 'generic',
                'PRIMER_PICK_LEFT_PRIMER': 0,
                'PRIMER_PICK_INTERNAL_OLIGO': 0,
                'PRIMER_PICK_RIGHT_PRIMER': 1,
                'PRIMER_NUM_RETURN': 5,
                'PRIMER_OPT_SIZE': 20,
                'PRIMER_MIN_SIZE': 18,
                'PRIMER_MAX_SIZE': 30,
                'PRIMER_OPT_TM': 60.0,
                'PRIMER_MIN_TM': 57.0,
                'PRIMER_MAX_TM': 63.0,
                'PRIMER_MIN_GC': 30.0,
                'PRIMER_MAX_GC': 80.0,
                'PRIMER_MAX_POLY_X': 5,
                'PRIMER_SALT_MONOVALENT': 50.0,
                'PRIMER_DNA_CONC': 50.0,
                'PRIMER_MAX_NS_ACCEPTED': 0,
                'PRIMER_MAX_SELF_ANY': 12,
                'PRIMER_MAX_SELF_END': 8,
                'PRIMER_PAIR_MAX_COMPL_ANY': 12,
                'PRIMER_PAIR_MAX_COMPL_END': 8,
                'PRIMER_GC_CLAMP': 1,
                'PRIMER_PRODUCT_SIZE_RANGE': [[50,90]],})
                 )
    return print('\n\n ',' Primer ',gname ,' : ', primer['PRIMER_RIGHT_0_SEQUENCE'],'\n\n Size: ',len(primer['PRIMER_RIGHT_0_SEQUENCE']),'bp' ,'\n\n','Melting Temperature: ', primer['PRIMER_RIGHT_0_TM'], '\n\n GC Content(%): ', primer['PRIMER_RIGHT_0_GC_PERCENT'],'\n\n')

#Calculate the restriction digest using BioPython
def restd(gRNA1,gRNA2):
    #Define Constants
    Rbl = [ApaI, BamHI, BglII, BsaI, BstBI, ClaI, DpnI,\
                                DraI, Eco52I, EcoRI, EcoRV, HaeIII, HindIII,\
                                HpaI, KpnI, MluI, NaeI, NcoI, NdeI, NheI,\
                                NotI, NsiI, PdmI, PfoI,PmeI, PsiI, PstI, PvuI,\
                                PvuII, RsaI, SacI, SacII,SalI, SbfI, SexAI,\
                                SmaI, SnaBI, SpeI, SspI, StuI,XbaI, XhoI, XmaI]
    Rb = RestrictionBatch(Rbl)
    m2  =  'AACGAAGCATCTGTGCTTCATTTTGTAGAACAAAAATGCAACGCGAGAGCGCTAATTTTTCAAACAAAGAATCTGAGCTGCATTTTTACAGAACAGAAATGCAACGCGAAAGCGCTATTTTACCAACGAAGAATCTGTGCTTCATTTTTGTAAAACAAAAATGCAACGCGAGAGCGCTAATTTTTCAAACAAAGAATCTGAGCTGCATTTTTACAGAACAGAAATGCAACGCGAGAGCGCTATTTTACCAACAAAGAATCTATACTTCTTTTTTGTTCTACAAAAATGCATCCCGAGAGCGCTATTTTTCTAACAAAGCATCTTAGATTACTTTTTTTCTCCTTTGTGCGCTCTATAATGCAGTCTCTTGATAACTTTTTGCACTGTAGGTCCGTTAAGGTTAGAAGAAGGCTACTTTGGTGTCTATTTTCTCTTCCATAAAAAAAGCCTGACTCCACTTCCCGCGTTTACTGATTACTAGCGAAGCTGCGGGTGCATTTTTTCAAGATAAAGGCATCCCCGATTATATTCTATACCGATGTGGATTGCGCATACTTTGTGAACAGAAAGTGATAGCGTTGATGATTCTTCATTGGTCAGAAAATTATGAACGGTTTCTTCTATTTTGTCTCTATATACTACGTATAGGAAATGTTTACATTTTCGTATTGTTTTCGATTCACTCTATGAATAGTTCTTACTACAATTTTTTTGTCTAAAGAGTAATACTAGAGATAAACATAAAAAATGTAGAGGTCGAGTTTAGATGCAAGTTCAAGGAGCGAAAGGTGGATGGGTAGGTTATATAGGGATATAGCACAGAGATATATAGCAAAGAGATACTTTTGAGCAATGTTTGTGGAAGCGGTATTCGCAATATTTTAGTAGCTCGTTACAGTCCGGTGCGTTTTTGGTTTTTTGAAAGTGCGTCTTCAGAGCGCTTTTGGTTTTCAAAAGCGCTCTGAAGTTCCTATACTTTCTACAGAATAGGAACTTCGGAATAGGAACTTCAAAGCGTTTCCGAAAACGAGCGCTTCCGAAAATGCAACGCGAGCTGCGCACATACAGCTCACTGTTCACGTCGCACCTATATCTGCGTGTTGCCTGTATATATATATACATGAGAAGAAC'
    pUD =  'CAACTTTCACTTCTACAGCGTTTGACCAAAATCTTTTGAACAGAACATTGTAGGGTGTGAAAAAATGCGCACCTTTACCGCTAGCCCAAGAGGGCACTACAAAATCTAGAGTTGTACTTCAAACGTACATGTAATCACCTTGTATATACTCGAAAGAAAACATCAAGTTTCTGTATAAATATGAGTGAAAGCATAATCATACATTATCTTTTCAAAGAAGCTCCAGCTTTTGTTCCCTTTAGTGAGGGTATTCACGTAGACGGATAGGTATAGCCAGACATCAGCAGCATACTTCGGGAACCGTAGGCTCTAGAGAGAGGCGGTTTGCGTATTGGGCGCTCTTCCGCTTCCTCGCTCACTGACTCGCTGCGCTCGGTCGTTCGGCTGCGGCGAGCGGTATCAGCTCACTCAAAGGCGGTAATACGGTTATCCACAGAATCAGGGGATAACGCAGGAAAGAACATGTGAGCAAAAGGCCAGCAAAAGGCCAGGAACCGTAAAAAGGCCGCGTTGCTGGCGTTTTTCCATAGGCTCCGCCCCCCTGACGAGCATCACAAAAATCGACGCTCAAGTCAGAGGTGGCGAAACCCGACAGGACTATAAAGATACCAGGCGTTTCCCCCTGGAAGCTCCCTCGTGCGCTCTCCTGTTCCGACCCTGCCGCTTACCGGATACCTGTCCGCCTTTCTCCCTTCGGGAAGCGTGGCGCTTTCTCATAGCTCACGCTGTAGGTATCTCAGTTCGGTGTAGGTCGTTCGCTCCAAGCTGGGCTGTGTGCACGAACCCCCCGTTCAGCCCGACCGCTGCGCCTTATCCGGTAACTATCGTCTTGAGTCCAACCCGGTAAGACACGACTTATCGCCACTGGCAGCAGCCACTGGTAACAGGATTAGCAGAGCGAGGTATGTAGGCGGTGCTACAGAGTTCTTGAAGTGGTGGCCTAACTACGGCTACACTAGAAGGACAGTATTTGGTATCTGCGCTCTGCTGAAGCCAGTTACCTTCGGAAAAAGAGTTGGTAGCTCTTGATCCGGCAAACAAACCACCGCTGGTAGCGGTGGTTTTTTTGTTTGCAAGCAGCAGATTACGCGCAGAAAAAAAGGATCTCAAGAAGATCCTTTGATCTTTTCTACGGGGTCTGACGCTCAGTGGAACGAAAACTCACGTTAAGGGATTTTGGTCATGAGATTATCAAAAAGGATCTTCACCTAGATCCTTTTAAATTAAAAATGAAGTTTTAAATCAATCTAAAGTATATATGAGTAAACTTGGTCTGACAGTTACCAATGCTTAATCAGTGAGGCACCTATCTCAGCGATCTGTCTATTTCGTTCATCCATAGTTGCCTGACTCCCCGTCGTGTAGATAACTACGATACGGGAGGGCTTACCATCTGGCCCCAGTGCTGCAATGATACCGCGAGACCCACGCTCACCGGCTCCAGATTTATCAGCAATAAACCAGCCAGCCGGAAGGGCCGAGCGCAGAAGTGGTCCTGCAACTTTATCCGCCTCCATCCAGTCTATTAATTGTTGCCGGGAAGCTAGAGTAAGTAGTTCGCCAGTTAATAGTTTGCGCAACGTTGTTGCCATTGCTACAGGCATCGTGGTGTCACGCTCGTCGTTTGGTATGGCTTCATTCAGCTCCGGTTCCCAACGATCAAGGCGAGTTACATGATCCCCCATGTTGTGCAAAAAAGCGGTTAGCTCCTTCGGTCCTCCGATCGTTGTCAGAAGTAAGTTGGCCGCAGTGTTATCACTCATGGTTATGGCAGCACTGCATAATTCTCTTACTGTCATGCCATCCGTAAGATGCTTTTCTGTGACTGGTGAGTACTCAACCAAGTCATTCTGAGAATAGTGTATGCGGCGACCGAGTTGCTCTTGCCCGGCGTCAATACGGGATAATACCGCGCCACATAGCAGAACTTTAAAAGTGCTCATCATTGGAAAACGTTCTTCGGGGCGAAAACTCTCAAGGATCTTACCGCTGTTGAGATCCAGTTCGATGTAACCCACTCGTGCACCCAACTGATCTTCAGCATCTTTTACTTTCACCAGCGTTTCTGGGTGAGCAAAAACAGGAAGGCAAAATGCCGCAAAAAAGGGAATAAGGGCGACACGGAAATGTTGAATACTCATACTCTTCCTTTTTCAATATTATTGAAGCATTTATCAGGGTTATTGTCTCATGAGCGGATACATATTTGAATGTATTTAGAAAAATAAACAAATAGGGGTTCCGCGCACTCGAGACTATATGTGAAGGCATGGCTATGGCACGGCAGACATTCCGCCAGATCATCAATAGGCACCTTCGTACGCTGCAGGTCGACAACCCTTAATATAACTTCGTATAATGTATGCTATACGAAGTTATTAGGTCTAGAGATCTGTTTAGCTTGCCTCGTCCCCGCCGGGTCACCCGGCCAGCGACATGGAGGCCCAGAATACCCTCCTTGACAGTCTTGACGTGCGCAGCTCAGGGGCATGATGTGACTGTCGCCCGTACATTTAGCCCATACATCCCCATGTATAATCATTTGCATCCATACATTTTGATGGCCGCACGGCGCGAAGCAAAAATTACGGCTCCTCGCTGCAGACCTGCGAGCAGGGAAACGCTCCCCTCACAGACGCGTTGAATTGTCCCCACGCCGCGCCCCTGTAGAGAAATATAAAAGGTTAGGATTTGCCACTGAGGTTCTTCTTTCATATACTTCCTTTTAAAATCTTGCTAGGATACAGTTCTCACATCACATCCGAACATAAACAACCATGGGTAAAAAGCCTGAACTCACCGCGACGTCTGTCGAGAAGTTTCTGATCGAAAAGTTCGACAGCGTCTCCGACCTGATGCAGCTCTCGGAGGGCGAAGAATCTCGTGCTTTCAGCTTCGATGTAGGAGGGCGTGGATATGTCCTGCGGGTAAATAGCTGCGCCGATGGTTTCTACAAAGATCGTTATGTTTATCGGCACTTTGCATCGGCCGCGCTCCCGATTCCGGAAGTGCTTGACATTGGGGAATTCAGCGAGAGCCTGACCTATTGCATCTCCCGCCGTGCACAGGGTGTCACGTTGCAAGACCTGCCTGAAACCGAACTGCCCGCTGTTCTGCAGCCGGTCGCGGAGGCCATGGATGCGATCGCTGCGGCCGATCTTAGCCAGACGAGCGGGTTCGGCCCATTCGGACCGCAAGGAATCGGTCAATACACTACATGGCGTGATTTCATATGCGCGATTGCTGATCCCCATGTGTATCACTGGCAAACTGTGATGGACGACACCGTCAGTGCGTCCGTCGCGCAGGCTCTCGATGAGCTGATGCTTTGGGCCGAGGACTGCCCCGAAGTCCGGCACCTCGTGCACGCGGATTTCGGCTCCAACAATGTCCTGACGGACAATGGCCGCATAACAGCGGTCATTGACTGGAGCGAGGCGATGTTCGGGGATTCCCAATACGAGGTCGCCAACATCTTCTTCTGGAGGCCGTGGTTGGCTTGTATGGAGCAGCAGACGCGCTACTTCGAGCGGAGGCATCCGGAGCTTGCAGGATCGCCGCGGCTCCGGGCGTATATGCTCCGCATTGGTCTTGACCAACTCTATCAGAGCTTGGTTGACGGCAATTTCGATGATGCAGCTTGGGCGCAGGGTCGATGCGACGCAATCGTCCGATCCGGAGCCGGGACTGTCGGGCGTACACAAATCGCCCGCAGAAGCGCGGCCGTCTGGACCGATGGCTGTGTAGAAGTACTCGCCGATAGTGGAAACCGACGCCCCAGCACTCGTCCGAGGGCAAAGGAATAATCTCGAGTCATGTAATTAGTTATGTCACGCTTACATTCACGCCCTCCCCCCACATCCGCTCTAACCGAAAAGGAAGGAGTTAGACAACCTGAAGTCTAGGTCCCTATTTATTTTTTTATAGTTATGTTAGTATTAAGAACGTTATTTATATTTCAAATTTTTCTTTTTTTTCTGTACAGACGCGTGTACGCATGTAACATTATACTGAAAACCTTGCTTGAGAAGGTTTTGGGACGCTCGAAGGCTTTAACGAGCTCTCGAGAACCCTTAATATAACTTCGTATAATGTATGCTATACGAAGTTATTAGGTGATATCAGATCCACTAGTGGCCTATGCCACCTTTCGAGAGGACGATGCCCGTGTCTAAATGATTCGACCAGCCTAAGAATGTTCAACCCCTCACTAAAGGGAACAAAAGCTGGAGCTTCTTTGAAAAGATAATGTATGATTATGCTTTCACTCATATTTATACAGAAACTTGATGTTTTCTTTCGAGTATATACAAGGTGATTACATGTACGTTTGAAGTACAACTCTAGATTTTGTAGTGCCCTCTTGGGCTAGCGGTAAAGGTGCGCATTTTTTCACACCCTACAATGTTCTGTTCAAAAGATTTTGGTCAAACGCTGTAGAAGTGAAAGTTGGTGCGCATGTTTCGGCGTTCGAAACTTCTCCGCAGTGAAAGATAAATGATCTTGACTGATTTTTCCATGGAGTTTTAGAGCTAGAAATAGCAAGTTAAAATAAGGCTAGTCCGTTATCAACTTGAAAAAGTGGCACCGAGTCGGTGGTGCTTTTTTTGTTTTTTATGTCTTCGAGTCATGTAATTAGTTATGTCACGCTTACGTTCACGCCCTCCACGCATTTAAGCATAAACACGCACTATGCCGTTCTTCTCATGTATATATATATACAGGCAACACGCAGATATAGGTGCGACGTGAACAGTGAGCTGTATGTGCGCAGCTCGCGTTGCATTTTCGGAAGCGCTCGTTTTCGGAAACGCTTTGAAGTTCCTATTCCGAAGTTCCTATTCTGTAGAAAGTATAGGAACTTCAGAGCGCTTTTGAAAACCAAAAGCGCTCTGAAGACGCACTTTCAAAAAACCAAAAACGCACCGGACTGTAACGAGCTACTAAAATATTGCGAATACCGCTTCCACAAACATTGCTCAAAAGTATCTCTTTGCTATATATCTCTGTGCTATATCCCTATATAACCTACCCATCCACCTTTCGCTCCTTGAACTTGCATCTAAACTCGACCTCTACATTTTTTATGTTTATCTCTAGTATTACTCTTTAGACAAAAAAATTGTAGTAAGAACTATTCATAGAGTGAATCGAAAACAATACGAAAATGTAAACATTTCCTATACGTAGTATATAGAGACAAAATAGAAGAAACCGTTCATAATTTTCTGACCAATGAAGAATCATCAACGCTATCACTTTCTGTTCACAAAGTATGCGCAATCCACATCGGTATAGAATATAATCGGGGATGCCTTTATCTTGAAAAAATGCACCCGCAGCTTCGCTAGTAATCAGTAAACGCGGGAAGTGGAGTCAGGCTTTTTTTATGGAAGAGAAAATAGACACCAAAGTAGCCTTCTTCTAACCTTAACGGACCTACAGTGCAAAAAGTTATCAAGAGACTGCATTATAGAGCGCACAAAGGAGAAAAAAAGTAATCTAAGATGCTTTGTTAGAAAAATAGCGCTCTCGGGATGCATTTTTGTAGAACAAAAAAGAAGTATAGATTCTTTGTTGGTAAAATAGCGCTCTCGCGTTGCATTTCTGTTCTGTAAAAATGCAGCTCAGATTCTTTGTTTGAAAAATTAGCGCTCTCGCGTTGCATTTTTGTTTTACAAAAATGAAGCACAGATTCTTCGTTGGTAAAATAGCGCTTTCGCGTTGCATTTCTGTTCTGTAAAAATGCAGCTCAGATTCTTTGTTTGAAAAATTAGCGCTCTCGCGTTGCATTTTTGTTCTACAAAATGAAGCACAGATGCTTCGTTGGAGGGCGTGAACGTAAGCGTGACATAACTAATTACATGACTCGAAGACATAAAAAACAAAAAAAGCACCACCGACTCGGTGCCACTTTTTCAAGTTGATAACGGACTAGCCTTATTTTAACTTGCTATTTCTAGCTCTAAAACTCCATGGAAAAATCAGTCAAGATCATTTATCTTTCACTGCGGAGAAGTTTCGAACGCCGAAACATGCGCAC'
    
    # Convert to Seq
    bb = Seq(gRNA1 + m2 + gRNA2, generic_dna)
    pUD = Seq(pUD, generic_dna)
    gRNA1 = Seq(gRNA1, generic_dna)
    gRNA2 = Seq(gRNA2, generic_dna) 
    mu2 = Seq(m2, generic_dna) 
    
    #Digestion Analysis
    Anax = Analysis(Rb,  gRNA1, linear = False)
    Anay = Analysis(Rb,  gRNA2, linear = True)
    Anabb = Analysis(Rb, bb,    linear = True)
    Anaz = Analysis(Rb,  pUD,  linear = True)
    Anam2 = Analysis(Rb, mu2,   linear = True)
    
    # Show full list
    bbf    = Anabb.full()
    Anaxf  = Anax.full()
    Anayf  = Anay.full()
    Anazf  = Anaz.full()
    Anam2f = Anam2.full()
    
    #Convert lists to Restriction batches
    bba = lux(Rbl, bbf,   Rb)
    xa  = lux(Rbl, Anaxf, Rb)
    ya  = lux(Rbl, Anayf, Rb)
    za  = lux(Rbl, Anazf, Rb)
    mu2 = lux(Rbl, Anam2f, Rb)
    
    #Using Batch's Calculate Unique Sites
    nolap = xa ^ ya - za - mu2
    xlap = xa - ya - za 
    ylap = ya - xa - za
    upUD = za - bba 
    
    #Future: Calculate size of fragments:
    #plasmid = x+y+z+m2

    #Confirm unique sites:
    if nolap and xlap or ylap !=set():
        print('\n\n Digest Results : \n\n', 'gRAN1 can be exclusively digested with: ',(list(xlap)),'\n\n', ' gRNA2 with: ', (list(ylap)),'\n\n pUD with: ', (list(upUD)), '\n\n')
    else:
        print("\n\n  Digest Results: \n\n Unfortunately no restriction enzymes satisfy your criteria :'( \n\n")   

# Use Selenium to extract data from YR and call other functions
def ggg(gene1,gene2):
    driver = webdriver.Chrome()
    driver.get("http://yeastriction.tnw.tudelft.nl/#!/")
    elem1 = driver.find_element_by_xpath('/html[1]/body[1]/section[1]/section[1]/section[1]/section[1]/div[1]/div[1]/div[1]/form[1]/div[1]/div[1]/select[1]')
    elem1.send_keys("CE",5)
    elem2 = driver.find_element_by_id('inputLoci')
    elem2.clear()
    elem2.send_keys(gene1, ",", gene2)
    elem3 = driver.find_element_by_xpath('/html[1]/body[1]/section[1]/section[1]/section[1]/section[1]/div[1]/div[1]/div[1]/form[1]/div[4]/div[1]/button[1]')
    elem3.click()
    driver.implicitly_wait(0.5) 
    elem4 = driver.find_element_by_xpath('/html[1]/body[1]/section[1]/section[1]/section[1]/section[1]/div[1]/div[1]/div[3]/table[1]/tbody[1]/tr[2]/td[2]/span[1]')
    elem4_content = elem4.get_attribute('innerHTML')
    gRNA1 = 'TGCGCATGTTTCGGCGTTCGAAACTTCTCCGCAGTGAAAGATAAATGATC' + (elem4_content.strip()) + 'GTTTTAGAGCTAGAAATAGCAAGTTAAAATAAGGCTAGTCCGTTATCAAC'
    elem5 = driver.find_element_by_xpath('/html[1]/body[1]/section[1]/section[1]/section[1]/section[1]/div[1]/div[1]/div[3]/table[1]/tbody[2]/tr[2]/td[2]/span[1]')
    elem5_content = elem5.get_attribute('innerHTML')
    gRNA2 = 'TGCGCATGTTTCGGCGTTCGAAACTTCTCCGCAGTGAAAGATAAATGATC' + (elem5_content.strip()) + 'GTTTTAGAGCTAGAAATAGCAAGTTAAAATAAGGCTAGTCCGTTATCAAC'
    driver.quit() 
    restd(gRNA1,gRNA2)
    primer(gRNA1,gene1)
    primery(gRNA2,gene2)
    


  



    
    
    
